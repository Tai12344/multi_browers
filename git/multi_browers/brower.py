import pygetwindow as gw
from pynput import mouse, keyboard
import threading
import time
import win32gui
import win32api
import win32con

# === C·∫§U H√åNH ===
SCROLL_SPEED = 1.0          # T·ªëc ƒë·ªô cu·ªôn (1.0 = b√¨nh th∆∞·ªùng)
WINDOW_SCAN_INTERVAL = 0.5  # Qu√©t c·ª≠a s·ªï m·ªõi m·ªói 0.5s (c√†ng nh·ªè c√†ng nhanh ph√°t hi·ªán)
ENABLE_KEYBOARD_SYNC = False # T·∫Øt ƒë·ªìng b·ªô ph√≠m (v√¨ Win32 API kh√¥ng ƒë·ªìng b·ªô ph√≠m t·ªët)

# === BI·∫æN TO√ÄN C·ª§C ===
syncing_lock = threading.Lock()
windows_lock = threading.Lock()
stop_event = threading.Event()

main_window = None
other_windows = []
main_hwnd = None
other_hwnds = []

mouse_listener = None
key_listener = None

# === KH·ªûI T·∫†O BAN ƒê·∫¶U ===
def get_valid_chrome_windows():
    """L·∫•y danh s√°ch t·∫•t c·∫£ c·ª≠a s·ªï Chrome h·ª£p l·ªá"""
    all_wins = gw.getWindowsWithTitle('Chrome')
    valid = []
    for w in all_wins:
        try:
            # Ch·ªâ l·∫•y c·ª≠a s·ªï kh√¥ng b·ªã thu nh·ªè v√† c√≥ k√≠ch th∆∞·ªõc > 0
            if not w.isMinimized and w.width > 100 and w.height > 100:
                valid.append(w)
        except:
            pass
    return valid

def update_window_list():
    """C·∫≠p nh·∫≠t danh s√°ch c·ª≠a s·ªï"""
    global main_window, other_windows, main_hwnd, other_hwnds
    
    valid_wins = get_valid_chrome_windows()
    
    if len(valid_wins) < 1:
        main_window = None
        other_windows = []
        main_hwnd = None
        other_hwnds = []
        return False
    
    with windows_lock:
        # Gi·ªØ nguy√™n c·ª≠a s·ªï ch√≠nh n·∫øu c√≤n t·ªìn t·∫°i
        if main_window and main_hwnd:
            # Ki·ªÉm tra main window c√≤n trong danh s√°ch kh√¥ng
            current_main = None
            for w in valid_wins:
                try:
                    if w._hWnd == main_hwnd:
                        current_main = w
                        break
                except:
                    pass
            
            if current_main:
                main_window = current_main
            else:
                # Main window b·ªã ƒë√≥ng, ch·ªçn c·ª≠a s·ªï ƒë·∫ßu ti√™n l√†m main
                main_window = valid_wins[0]
                main_hwnd = main_window._hWnd
        else:
            # L·∫ßn ƒë·∫ßu ho·∫∑c ch∆∞a c√≥ main
            main_window = valid_wins[0]
            main_hwnd = main_window._hWnd
        
        # C·∫≠p nh·∫≠t danh s√°ch c·ª≠a s·ªï ph·ª•
        other_windows = []
        other_hwnds = []
        for w in valid_wins:
            try:
                if w._hWnd != main_hwnd:
                    other_windows.append(w)
                    other_hwnds.append(w._hWnd)
            except:
                pass
    
    return True

# Kh·ªüi t·∫°o l·∫ßn ƒë·∫ßu
if not update_window_list():
    print("‚ùå C·∫ßn √≠t nh·∫•t 1 c·ª≠a s·ªï Chrome ƒë·ªÉ ch·∫°y!")
    print("   M·ªü Chrome v√† ch·∫°y l·∫°i script.")
    exit()

print("=" * 70)
print(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(other_windows) + 1} c·ª≠a s·ªï Chrome")
print(f"üéØ C·ª≠a s·ªï ch√≠nh: '{main_window.title[:50]}...'")
print(f"   HWND: {main_hwnd}")
print(f"üìã {len(other_windows)} c·ª≠a s·ªï ph·ª• s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô")
print("=" * 70)
print("üöÄ H·ªá th·ªëng ƒë·ªìng b·ªô si√™u nhanh ƒëang ch·∫°y")
print("   ‚úì T·ª± ƒë·ªông ph√°t hi·ªán c·ª≠a s·ªï m·ªõi m·ªói 0.5s")
print("   ‚úì Click/Scroll ƒë·ªìng b·ªô ngay l·∫≠p t·ª©c")
print("   ‚úì Con tr·ªè chu·ªôt KH√îNG di chuy·ªÉn (Win32 API)")
print("   ‚úì ƒê·ªô tr·ªÖ c·ª±c th·∫•p")
print("   ‚Ä¢ Nh·∫•n ESC ƒë·ªÉ tho√°t")
print("=" * 70 + "\n")

# === GI√ÅM S√ÅT C·ª¨A S·ªî (AUTO-DETECT) ===
last_window_count = len(other_windows) + 1

def monitor_windows():
    """Thread gi√°m s√°t v√† t·ª± ƒë·ªông c·∫≠p nh·∫≠t c·ª≠a s·ªï"""
    global last_window_count
    
    while not stop_event.is_set():
        try:
            if update_window_list():
                current_count = len(other_windows) + 1
                
                if current_count != last_window_count:
                    if current_count > last_window_count:
                        diff = current_count - last_window_count
                        print(f"‚ûï ƒê√£ ph√°t hi·ªán {diff} c·ª≠a s·ªï Chrome m·ªõi! T·ªïng: {current_count} c·ª≠a s·ªï")
                    else:
                        diff = last_window_count - current_count
                        print(f"‚ûñ {diff} c·ª≠a s·ªï Chrome ƒë√£ ƒë√≥ng. C√≤n l·∫°i: {current_count} c·ª≠a s·ªï")
                    
                    last_window_count = current_count
            else:
                if last_window_count > 0:
                    print("‚ö†Ô∏è  T·∫•t c·∫£ c·ª≠a s·ªï Chrome ƒë√£ ƒë√≥ng!")
                    last_window_count = 0
        except:
            pass
        
        time.sleep(WINDOW_SCAN_INTERVAL)

# === ƒê·ªíNG B·ªò NHANH V·ªöI WIN32 ===
def sync_click(x, y, button):
    """ƒê·ªìng b·ªô click c·ª±c nhanh"""
    with syncing_lock:
        with windows_lock:
            if not main_window or not other_hwnds:
                return
            
            main_left = main_window.left
            main_top = main_window.top
            rel_x = x - main_left
            rel_y = y - main_top
        
        # X√°c ƒë·ªãnh lo·∫°i n√∫t
        btn = str(button).split('.')[-1].lower()
        if btn == 'left':
            down_msg, up_msg = win32con.WM_LBUTTONDOWN, win32con.WM_LBUTTONUP
            wparam = win32con.MK_LBUTTON
        elif btn == 'right':
            down_msg, up_msg = win32con.WM_RBUTTONDOWN, win32con.WM_RBUTTONUP
            wparam = win32con.MK_RBUTTON
        elif btn == 'middle':
            down_msg, up_msg = win32con.WM_MBUTTONDOWN, win32con.WM_MBUTTONUP
            wparam = win32con.MK_MBUTTON
        else:
            return
        
        # G·ª≠i click ƒë·∫øn t·∫•t c·∫£ c·ª≠a s·ªï ph·ª•
        for hwnd in other_hwnds:
            try:
                if not win32gui.IsWindow(hwnd) or win32gui.IsIconic(hwnd):
                    continue
                
                # Chuy·ªÉn t·ªça ƒë·ªô sang client coordinates
                lparam = win32api.MAKELONG(rel_x & 0xFFFF, rel_y & 0xFFFF)
                
                # G·ª≠i message
                win32gui.PostMessage(hwnd, down_msg, wparam, lparam)
                win32gui.PostMessage(hwnd, up_msg, 0, lparam)
            except:
                pass

def sync_scroll(x, y, dx, dy):
    """ƒê·ªìng b·ªô cu·ªôn c·ª±c nhanh"""
    with syncing_lock:
        with windows_lock:
            if not main_window or not other_hwnds:
                return
            
            main_left = main_window.left
            main_top = main_window.top
            rel_x = x - main_left
            rel_y = y - main_top
        
        # T√≠nh scroll amount
        scroll_amount = int(120 * dy * SCROLL_SPEED)
        if scroll_amount == 0:
            return
        
        wparam = win32api.MAKELONG(0, scroll_amount & 0xFFFF)
        
        # G·ª≠i scroll ƒë·∫øn t·∫•t c·∫£ c·ª≠a s·ªï ph·ª•
        for hwnd in other_hwnds:
            try:
                if not win32gui.IsWindow(hwnd) or win32gui.IsIconic(hwnd):
                    continue
                
                # L·∫•y v·ªã tr√≠ c·ª≠a s·ªï ph·ª•
                rect = win32gui.GetWindowRect(hwnd)
                screen_x = rect[0] + rel_x
                screen_y = rect[1] + rel_y
                
                lparam = win32api.MAKELONG(screen_x & 0xFFFF, screen_y & 0xFFFF)
                win32gui.PostMessage(hwnd, win32con.WM_MOUSEWHEEL, wparam, lparam)
            except:
                pass

def is_in_main_window(x, y):
    """Ki·ªÉm tra t·ªça ƒë·ªô c√≥ trong c·ª≠a s·ªï ch√≠nh kh√¥ng"""
    try:
        with windows_lock:
            if not main_window:
                return False
            return (main_window.left <= x < main_window.left + main_window.width and 
                    main_window.top <= y < main_window.top + main_window.height)
    except:
        return False

# === L·∫ÆNG NGHE S·ª∞ KI·ªÜN ===
def on_click(x, y, button, pressed):
    if pressed and is_in_main_window(x, y):
        # Kh√¥ng d√πng thread cho click ƒë·ªÉ gi·∫£m ƒë·ªô tr·ªÖ
        sync_click(x, y, button)

def on_scroll(x, y, dx, dy):
    if is_in_main_window(x, y):
        # Kh√¥ng d√πng thread cho scroll ƒë·ªÉ gi·∫£m ƒë·ªô tr·ªÖ
        sync_scroll(x, y, dx, dy)

def on_release(key):
    if key == keyboard.Key.esc:
        print("\n" + "=" * 70)
        print("üõë ƒê√£ nh·∫•n ESC - ƒêang tho√°t...")
        print("=" * 70)
        stop_event.set()
        if mouse_listener:
            mouse_listener.stop()
        if key_listener:
            key_listener.stop()
        return False

# === CH·∫†Y CH∆Ø∆†NG TR√åNH ===
try:
    # Kh·ªüi ƒë·ªông thread gi√°m s√°t c·ª≠a s·ªï
    monitor_thread = threading.Thread(target=monitor_windows, daemon=True)
    monitor_thread.start()
    
    # Kh·ªüi ƒë·ªông listener
    mouse_listener = mouse.Listener(on_click=on_click, on_scroll=on_scroll)
    key_listener = keyboard.Listener(on_release=on_release)
    
    mouse_listener.start()
    key_listener.start()
    
    mouse_listener.join()
    key_listener.join()
    
    print("\n‚úÖ H·ªá th·ªëng ƒë√£ d·ª´ng an to√†n.")

except KeyboardInterrupt:
    print("\n‚ö†Ô∏è  Ctrl+C - ƒêang tho√°t...")
    stop_event.set()
except Exception as e:
    print(f"\n‚ùå L·ªói: {e}")
    import traceback
    traceback.print_exc()
finally:
    stop_event.set()
    if mouse_listener:
        try:
            mouse_listener.stop()
        except:
            pass
    if key_listener:
        try:
            key_listener.stop()
        except:
            pass