import pygetwindow as gw
import pyautogui
from pynput import mouse, keyboard
import threading
import time
import win32api
import win32con
import win32gui

# --- C√ÄI ƒê·∫∂T ---
# pip install pygetwindow pyautogui pynput

# C·∫•u h√¨nh
SCROLL_MULTIPLIER = 120  # ƒê·ªô m∆∞·ª£t c·ªßa cu·ªôn
SYNC_DELAY = 0.001  # Delay c·ª±c nh·ªè ƒë·ªÉ chu·ªôt tr·∫£ v·ªÅ nhanh h∆°n
ENABLE_KEYBOARD_SYNC = True  # B·∫≠t/t·∫Øt ƒë·ªìng b·ªô b√†n ph√≠m
# Thi·∫øt l·∫≠p PyAutoGUI ƒë·ªÉ tr√°nh d·ª´ng kh·∫©n c·∫•p v√† tƒÉng t·ªëc ƒë·ªô
pyautogui.FAILSAFE = False
pyautogui.PAUSE = 0

# --- TI·ªÜN √çCH WIN32: G·ª¨I S·ª∞ KI·ªÜN CHU·ªòT KH√îNG DI CHUY·ªÇN CON TR·ªé ---
def _to_client(hwnd, x_screen, y_screen):
    try:
        return win32gui.ScreenToClient(hwnd, (int(x_screen), int(y_screen)))
    except Exception:
        # Fallback: 0,0 if chuy·ªÉn ƒë·ªïi l·ªói
        return (0, 0)

def _make_lparam(x, y):
    return win32api.MAKELONG(int(x) & 0xFFFF, int(y) & 0xFFFF)

def _send_mouse_click(hwnd, x_screen, y_screen, button):
    if not hwnd:
        return
    cx, cy = _to_client(hwnd, x_screen, y_screen)
    lparam = _make_lparam(cx, cy)
    btn = str(button).split('.')[-1].lower()
    if btn == 'left':
        win32api.PostMessage(hwnd, win32con.WM_LBUTTONDOWN, win32con.MK_LBUTTON, lparam)
        win32api.PostMessage(hwnd, win32con.WM_LBUTTONUP, 0, lparam)
    elif btn == 'right':
        win32api.PostMessage(hwnd, win32con.WM_RBUTTONDOWN, win32con.MK_RBUTTON, lparam)
        win32api.PostMessage(hwnd, win32con.WM_RBUTTONUP, 0, lparam)
    elif btn == 'middle':
        win32api.PostMessage(hwnd, win32con.WM_MBUTTONDOWN, win32con.MK_MBUTTON, lparam)
        win32api.PostMessage(hwnd, win32con.WM_MBUTTONUP, 0, lparam)

def _send_mouse_wheel(hwnd, x_screen, y_screen, delta_y):
    if not hwnd or not delta_y:
        return
    cx, cy = _to_client(hwnd, x_screen, y_screen)
    lparam = _make_lparam(cx, cy)
    wparam = win32api.MAKELONG(0, int(delta_y) * win32con.WHEEL_DELTA)
    win32api.PostMessage(hwnd, win32con.WM_MOUSEWHEEL, wparam, lparam)

# Bi·∫øn to√†n c·ª•c
syncing_lock = threading.Lock()
windows_lock = threading.Lock()
stop_event = threading.Event()
mouse_listener = None
key_listener = None
window_monitor_thread = None

try:
    # L·∫•y danh s√°ch c√°c c·ª≠a s·ªï Chrome
    all_windows = gw.getWindowsWithTitle('Chrome')
    
    # L·ªçc c√°c c·ª≠a s·ªï h·ª£p l·ªá (kh√¥ng b·ªã thu nh·ªè, c√≥ k√≠ch th∆∞·ªõc > 0)
    windows = []
    for w in all_windows:
        try:
            if not w.isMinimized and w.width > 0 and w.height > 0:
                windows.append(w)
        except:
            continue

    if len(windows) < 2:
        print("‚ùå C·∫ßn √≠t nh·∫•t 2 c·ª≠a s·ªï Chrome ƒë·ªÉ ƒë·ªìng b·ªô!")
        print("M·ªü th√™m c·ª≠a s·ªï Chrome v√† ch·∫°y l·∫°i script.")
        print(f"\nHi·ªán t·∫°i t√¨m th·∫•y {len(windows)} c·ª≠a s·ªï Chrome.")
        exit()

    main_window = windows[0]
    other_windows = windows[1:]

    print("=" * 60)
    print(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(windows)} c·ª≠a s·ªï Chrome")
    print(f"üéØ C·ª≠a s·ªï ch√≠nh: '{main_window.title[:50]}...'")
    print(f"   V·ªã tr√≠: ({main_window.left}, {main_window.top})")
    print(f"   K√≠ch th∆∞·ªõc: {main_window.width}x{main_window.height}")
    print(f"\nüìã Danh s√°ch {len(other_windows)} c·ª≠a s·ªï ph·ª•:")
    for i, w in enumerate(other_windows, 1):
        print(f"   {i}. '{w.title[:40]}...' - ({w.left}, {w.top})")
    print("=" * 60)
    print("üü¢ H·ªá th·ªëng ƒë·ªìng b·ªô ƒëang ch·∫°y")
    print("   ‚Ä¢ Click/Scroll trong c·ª≠a s·ªï ch√≠nh ƒë·ªÉ ƒë·ªìng b·ªô")
    if ENABLE_KEYBOARD_SYNC:
        print("   ‚Ä¢ G√µ ph√≠m trong c·ª≠a s·ªï ch√≠nh ƒë·ªÉ ƒë·ªìng b·ªô")
    print("   ‚Ä¢ Nh·∫•n ESC ƒë·ªÉ tho√°t")
    print("=" * 60 + "\n")

except Exception as e:
    print(f"‚ùå L·ªói kh·ªüi t·∫°o: {e}")
    import traceback
    traceback.print_exc()
    exit()

# --- GI√ÅM S√ÅT C·ª¨A S·ªî: T·ª∞ ƒê·ªòNG C·∫¨P NH·∫¨T DANH S√ÅCH ---
def _monitor_windows():
    global main_window, other_windows
    last_handles = set()
    while not stop_event.is_set():
        try:
            all_windows = gw.getWindowsWithTitle('Chrome')
            valid = []
            for w in all_windows:
                try:
                    if not w.isMinimized and w.width > 0 and w.height > 0:
                        valid.append(w)
                except Exception:
                    continue

            with windows_lock:
                # Gi·ªØ nguy√™n c·ª≠a s·ªï ch√≠nh n·∫øu c√≤n t·ªìn t·∫°i
                current_main = main_window
                current_main_handle = getattr(current_main, '_hWnd', None) if current_main else None

                # B·∫£n ƒë·ªì handle -> window
                handle_to_win = {getattr(w, '_hWnd', None): w for w in valid}

                if current_main_handle in handle_to_win:
                    new_main = handle_to_win[current_main_handle]
                else:
                    # Ch·ªçn main m·ªõi n·∫øu main c≈© kh√¥ng c√≤n
                    new_main = valid[0] if valid else None

                if new_main:
                    new_others = [w for w in valid if getattr(w, '_hWnd', None) != getattr(new_main, '_hWnd', None)]
                else:
                    new_others = []

                main_window = new_main
                other_windows = new_others

                current_handles = set(handle_to_win.keys())

            # Th√¥ng b√°o khi c√≥ thay ƒë·ªïi s·ªë l∆∞·ª£ng c·ª≠a s·ªï
            if current_handles != last_handles:
                added = current_handles - last_handles
                removed = last_handles - current_handles
                if added:
                    print(f"‚ûï ƒê√£ ph√°t hi·ªán {len(added)} c·ª≠a s·ªï Chrome m·ªõi. ƒê·ªìng b·ªô ƒë√£ c·∫≠p nh·∫≠t.")
                if removed:
                    print(f"‚ûñ {len(removed)} c·ª≠a s·ªï Chrome ƒë√£ ƒë√≥ng ho·∫∑c kh√¥ng h·ª£p l·ªá. ƒê√£ lo·∫°i kh·ªèi ƒë·ªìng b·ªô.")
                last_handles = current_handles
        except Exception:
            pass
        time.sleep(1.0)

# --- H√ÄM ƒê·ªíNG B·ªò ---
def sync_action(action, *args):
    """Th·ª±c hi·ªán ƒë·ªìng b·ªô h√†nh ƒë·ªông sang c√°c c·ª≠a s·ªï ph·ª•"""
    with syncing_lock:
        try:
            # L·∫•y snapshot c·ª≠a s·ªï hi·ªán t·∫°i ƒë·ªÉ thao t√°c an to√†n
            with windows_lock:
                current_main = main_window
                current_others = list(other_windows)
            if not current_main:
                return
            main_pos = (current_main.left, current_main.top)
            # L∆∞u v·ªã tr√≠ chu·ªôt ban ƒë·∫ßu (kh√¥ng di chuy·ªÉn chu·ªôt khi ƒë·ªìng b·ªô)
            original_mouse_pos = pyautogui.position()
            
            for w in current_others:
                # B·ªè qua c·ª≠a s·ªï b·ªã thu nh·ªè ho·∫∑c kh√¥ng h·ª£p l·ªá
                try:
                    if w.isMinimized or w.width <= 0 or w.height <= 0:
                        continue
                except:
                    continue
                
                try:
                    if action == 'click':
                        x, y, button = args
                        # T√≠nh to√°n v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi
                        target_x = w.left + (x - main_pos[0])
                        target_y = w.top + (y - main_pos[1])
                        
                        # Ki·ªÉm tra xem v·ªã tr√≠ c√≥ n·∫±m trong c·ª≠a s·ªï ph·ª• kh√¥ng
                        if (w.left <= target_x < w.left + w.width and 
                            w.top <= target_y < w.top + w.height):
                            # G·ª≠i click tr·ª±c ti·∫øp qua Win32, kh√¥ng di chuy·ªÉn chu·ªôt
                            hwnd = getattr(w, '_hWnd', None)
                            _send_mouse_click(hwnd, target_x, target_y, button)
                            time.sleep(SYNC_DELAY)

                    elif action == 'scroll':
                        x, y, dx, dy = args
                        # T√≠nh v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi ƒë·ªÉ cu·ªôn
                        target_x = w.left + (x - main_pos[0])
                        target_y = w.top + (y - main_pos[1])
                        
                        # ƒê·∫£m b·∫£o v·ªã tr√≠ cu·ªôn n·∫±m trong c·ª≠a s·ªï
                        if (w.left <= target_x < w.left + w.width and 
                            w.top <= target_y < w.top + w.height):
                            # G·ª≠i wheel qua Win32, kh√¥ng di chuy·ªÉn chu·ªôt
                            hwnd = getattr(w, '_hWnd', None)
                            # Quy ƒë·ªïi dy sang s·ªë n·∫•c b√°nh xe: m·ªói n·∫•c l√† WHEEL_DELTA (120)
                            steps = int(dy)
                            if steps != 0:
                                _send_mouse_wheel(hwnd, target_x, target_y, steps)
                            time.sleep(SYNC_DELAY)

                    elif action == 'key':
                        key_value = args[0]
                        # K√≠ch ho·∫°t c·ª≠a s·ªï ph·ª•
                        w.activate()
                        time.sleep(0.05)
                        pyautogui.press(key_value)
                        # Tr·∫£ chu·ªôt v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu v√† k√≠ch ho·∫°t l·∫°i c·ª≠a s·ªï ch√≠nh
                        pyautogui.moveTo(original_mouse_pos[0], original_mouse_pos[1], duration=0)
                        with windows_lock:
                            cm = main_window
                        if cm:
                            cm.activate()
                        time.sleep(SYNC_DELAY)
                
                except Exception as e:
                    # Kh√¥ng di chuy·ªÉn chu·ªôt th·ª±c trong tr∆∞·ªùng h·ª£p l·ªói
                    print(f"‚ö†Ô∏è  L·ªói ƒë·ªìng b·ªô v·ªõi c·ª≠a s·ªï '{w.title[:30]}': {e}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói ƒë·ªìng b·ªô: {e}")

def is_in_main_window(x, y):
    """Ki·ªÉm tra xem t·ªça ƒë·ªô c√≥ n·∫±m trong c·ª≠a s·ªï ch√≠nh kh√¥ng"""
    try:
        with windows_lock:
            mw = main_window
        if not mw:
            return False
        return (mw.left <= x < mw.left + mw.width and 
                mw.top <= y < mw.top + mw.height)
    except:
        return False

# --- L·∫ÆNG NGHE S·ª∞ KI·ªÜN ---
def on_click(x, y, button, pressed):
    """X·ª≠ l√Ω s·ª± ki·ªán click chu·ªôt"""
    if pressed and is_in_main_window(x, y):
        threading.Thread(
            target=sync_action, 
            args=('click', x, y, button),
            daemon=True
        ).start()

def on_scroll(x, y, dx, dy):
    """X·ª≠ l√Ω s·ª± ki·ªán cu·ªôn chu·ªôt"""
    if is_in_main_window(x, y):
        threading.Thread(
            target=sync_action, 
            args=('scroll', x, y, dx, dy),
            daemon=True
        ).start()

def on_press(key):
    """X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n ph√≠m"""
    if not ENABLE_KEYBOARD_SYNC:
        return
    
    # Ki·ªÉm tra xem c·ª≠a s·ªï ch√≠nh c√≥ ƒëang active kh√¥ng
    try:
        active_window = gw.getActiveWindow()
        # So s√°nh theo handle ƒë·ªÉ ch√≠nh x√°c h∆°n thay v√¨ so s√°nh object
        active_handle = getattr(active_window, '_hWnd', None)
        with windows_lock:
            mw = main_window
        main_handle = getattr(mw, '_hWnd', None)
        if not active_window or (active_handle is not None and main_handle is not None and active_handle != main_handle):
            return
    except:
        return
    
    try:
        # Ph√≠m k√Ω t·ª± (a, b, c, 1, 2, 3, ...)
        key_value = key.char
        threading.Thread(
            target=sync_action, 
            args=('key', key_value),
            daemon=True
        ).start()
    except AttributeError:
        # Ph√≠m ƒë·∫∑c bi·ªát (enter, space, backspace, ...)
        special_keys = {
            keyboard.Key.enter: 'enter',
            keyboard.Key.space: 'space',
            keyboard.Key.backspace: 'backspace',
            keyboard.Key.delete: 'delete',
            keyboard.Key.tab: 'tab',
            keyboard.Key.up: 'up',
            keyboard.Key.down: 'down',
            keyboard.Key.left: 'left',
            keyboard.Key.right: 'right',
            keyboard.Key.home: 'home',
            keyboard.Key.end: 'end',
            keyboard.Key.page_up: 'pageup',
            keyboard.Key.page_down: 'pagedown'
        }
        
        if key in special_keys:
            threading.Thread(
                target=sync_action, 
                args=('key', special_keys[key]),
                daemon=True
            ).start()

def on_release(key):
    """X·ª≠ l√Ω s·ª± ki·ªán nh·∫£ ph√≠m"""
    if key == keyboard.Key.esc:
        print("\n" + "=" * 60)
        print("üõë ƒê√£ nh·∫•n ESC - ƒêang tho√°t ch∆∞∆°ng tr√¨nh...")
        print("=" * 60)
        if mouse_listener:
            mouse_listener.stop()
        if key_listener:
            key_listener.stop()
        return False

# --- CH·∫†Y CH∆Ø∆†NG TR√åNH ---
try:
    mouse_listener = mouse.Listener(on_click=on_click, on_scroll=on_scroll)
    key_listener = keyboard.Listener(on_press=on_press, on_release=on_release)
    window_monitor_thread = threading.Thread(target=_monitor_windows, daemon=True)

    mouse_listener.start()
    key_listener.start()
    window_monitor_thread.start()

    mouse_listener.join()
    key_listener.join()

    print("\n‚úÖ H·ªá th·ªëng ƒë√£ d·ª´ng an to√†n.")

except KeyboardInterrupt:
    print("\n\n‚ö†Ô∏è  ƒê√£ nh·∫≠n Ctrl+C - ƒêang tho√°t...")
    if mouse_listener:
        mouse_listener.stop()
    if key_listener:
        key_listener.stop()
    stop_event.set()
    if window_monitor_thread:
        try:
            window_monitor_thread.join(timeout=1.0)
        except Exception:
            pass
except Exception as e:
    print(f"\n‚ùå L·ªói: {e}")
    import traceback
    traceback.print_exc()